{"version":3,"sources":["PracticeRepoHome.js","apps/waves/src/components/Song.js","apps/waves/src/components/Player.js","apps/waves/src/components/LibrarySong.js","apps/waves/src/components/Library.js","apps/waves/src/components/Nav.js","apps/waves/src/data.js","apps/waves/src/App.js","apps/learning-context-api/src/reducers/bookReducer.js","apps/learning-context-api/src/contexts/BookContext.js","apps/learning-context-api/src/components/BookForm.js","apps/learning-context-api/src/components/BookDetails.js","apps/learning-context-api/src/components/BookList.js","apps/learning-context-api/src/components/Navbar.js","apps/learning-context-api/src/App.js","App.js","index.js"],"names":["PracticeRepoHome","Song","currentSong","libraryStatus","className","src","cover","alt","name","artist","Player","isPlaying","setIsPlaying","audioRef","setCurrentSong","songs","useState","songsList","setSongsList","loop","setLoop","shuffle","setShuffle","currentTime","duration","animationPercentage","played","songInfo","setSongInfo","timeUpdateHandler","e","current","target","songDuration","roundedCurrent","Math","round","roundedDuration","animation","getTime","time","floor","slice","faControl","faPause","faPlay","skipTrackHandler","direction","currentIndex","findIndex","song","id","copyIndex","pause","length","trackAnim","transform","background","style","color","min","max","value","type","onChange","console","log","step","onClick","icon","faRetweet","size","faAngleLeft","play","faAngleRight","arr","j","x","index","random","shuffleArray","faRandom","onLoadedData","playPromise","undefined","then","onTimeUpdate","ref","audio","onLoadedMetadata","onEnded","LibrarySong","soundIcon","selectSongHandler","faVolumeUp","faVolumeDown","onTouchStart","Library","map","Nav","setLibraryStatus","faWater","faMusic","chillHop","uuidv4","active","App","data","useRef","bookReducer","state","action","title","book","author","filter","BookContext","createContext","BookContextProvider","props","useReducer","books","dispatch","Provider","children","BookForm","useContext","setTitle","setAuthor","onSubmit","preventDefault","placeholder","BookDetails","BookList","Navbar","BookListApp","head","document","link","getElementById","window","location","pathname","indexOf","href","appendChild","exact","path","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0134858c.chunk.js","sourcesContent":["import React from 'react'\n\nconst PracticeRepoHome = () => {\n    return (\n        <div>\n            Practice Repo\n        </div>\n    )\n}\n\nexport default PracticeRepoHome\n","const Song = ({ currentSong, libraryStatus }) => {\n\n\n    return (\n        <div className={`song-container ${libraryStatus ? \"moved\" : \"\"}`}>\n\n            <img src={currentSong.cover} alt='Song Cover Art'></img>\n            <h2> {currentSong.name} </h2>\n            <h3>{currentSong.artist}</h3>\n\n\n        </div>\n    )\n}\n\nexport default Song;","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faAngleLeft, faAngleRight, faPause, faRetweet, faRandom, faBars } from '@fortawesome/free-solid-svg-icons' //importing specific svg icon from the free-solid-svg... library\nimport { useState } from 'react'\nimport TrackList from './TrackList'\nconst Player = ({ currentSong, isPlaying, setIsPlaying, audioRef, libraryStatus, setCurrentSong, songs }) => {\n    // State \n\n\n    // Song time coding========================================================================>\n    const [songsList, setSongsList] = useState([...songs])\n    const [loop, setLoop] = useState(false)\n    const [shuffle, setShuffle] = useState(false)\n    const [shuffled, setShuffled] = useState(false)\n    const [songInfo, setSongInfo] = useState({\n        currentTime: 0,\n        duration: 0,\n        animationPercentage: 0,\n        played: false,\n    }\n    )\n\n    const timeUpdateHandler = (e) => {\n        const current = e.target.currentTime\n        const songDuration = e.target.duration || 0\n\n        // Calculate Percentage of song.\n        const roundedCurrent = Math.round(current)\n        const roundedDuration = Math.round(songDuration)\n        const animation = Math.round((roundedCurrent / roundedDuration) * 100)\n        setSongInfo({ ...songInfo, currentTime: current, duration: songDuration, animationPercentage: animation, played: true })\n    }\n\n    const getTime = (time) => {\n        return (\n            Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2))\n\n    }\n    //================================================================================================/\n    // Reference\n    let faControl = null\n\n    // Pause and Play icons.\n    if (isPlaying === true) {\n        faControl = faPause\n    } else {\n        faControl = faPlay\n    }\n\n    //Event Handlers\n    const playSongHandler = () => {\n        if (isPlaying) {\n\n            audioRef.current.pause()\n            setIsPlaying(!isPlaying)\n        } else {\n            audioRef.current.play()\n            setIsPlaying(!isPlaying)\n        }\n    }\n\n    const autoHandler = () => {\n        if (isPlaying) {\n\n            const playPromise = audioRef.current.play()\n\n            if (playPromise !== undefined) {\n                playPromise.then(() => {\n                    audioRef.current.play()\n                })\n            }\n        }\n    }\n\n    function dragHandler(e) {\n        console.log(e)\n        audioRef.current.currentTime = e.target.value;\n        setSongInfo({ ...songInfo, currentTime: e.target.value });\n    }\n\n\n\n\n    const skipTrackHandler = (direction) => {\n        // console.log(playedSongs)\n        let currentIndex = songs.findIndex((song) => song.id === currentSong.id)        // for non-random\n        let copyIndex = songsList.findIndex((song) => song.id === currentSong.id)       // for random\n\n        if (!loop) {\n\n            if (shuffle) {\n                if (direction === 'skip-forward') {\n                    if (currentSong !== songsList[(songsList.length - 1)]) {\n                        setCurrentSong(songsList[copyIndex + 1]);\n                    } else if (currentSong === songsList[(songsList.length - 1)]) {\n                        setCurrentSong(songsList[0])\n                    }\n                } else { // skip backward while shuffle is on\n\n                    if (currentSong !== songsList[0]) {\n                        setCurrentSong(songsList[copyIndex - 1]);\n                    } else if (currentSong === songsList[0]) {\n                        setIsPlaying(false)\n                        audioRef.current.currentTime = 0\n                        audioRef.current.pause()\n                    }\n                }\n\n            } else { // When shuffle is inactive.\n                setSongsList([...songs])\n                if (direction === 'skip-forward') {\n                    setCurrentSong(songs[currentIndex + 1] || songs[0]);  // || songs[0] makes sure at the end when there are no more indexes it will go back to the beginning\n                } else {\n                    setCurrentSong(songs[currentIndex - 1] || songs[songs.length - 1]); // This one makes sure that if we're at index 0 and click back it will go to the last song.\n                }\n            }\n        } else {\n\n            if (direction === 'skip-forward') {\n                setCurrentSong(currentSong)\n                audioRef.current.currentTime = 0\n            }\n            if (direction === 'skip-backward') {\n\n                if (currentSong !== songsList[0]) {\n                    setCurrentSong(songsList[copyIndex - 1]);\n                } else if (currentSong === songsList[0]) {\n                    setIsPlaying(false)\n                    audioRef.current.currentTime = 0\n                    audioRef.current.pause()\n                }\n            }\n        }\n    }\n\n    const songEndHandler = () => {\n        let copyIndex = songsList.findIndex((song) => song.id === currentSong.id)\n\n\n\n\n        if (loop === false) {\n\n            setCurrentSong(songsList[copyIndex + 1])\n\n        }\n        else if (loop === true) {\n            audioRef.current.currentTime = 0\n            audioRef.current.play()\n\n        }\n\n    }\n\n    const shuffleHandler = () => {\n\n        function shuffleArray(arr) {\n            var j, x, index;\n            for (index = arr.length - 1; index > 0; index--) {\n                j = Math.floor(Math.random() * (index + 1));\n                x = arr[index];\n                arr[index] = arr[j];\n                arr[j] = x;\n            }\n            return arr;\n        }\n        if (shuffle === false) {\n\n            setShuffle(true)\n            setSongsList(shuffleArray(songsList))\n        }\n        else {\n            setShuffle(false)\n            setSongsList([...songs])\n        }\n    }\n\n    const loopHandler = () => {\n        if (loop === false) {\n            setLoop(true)\n        } else {\n            setLoop(false)\n        }\n    }\n\n\n\n    // INPUT SLIDER ANIMATION\n    const trackAnim = {\n        transform: `translateX(${songInfo.animationPercentage}%)`,\n        background: `lightgrey`\n    }\n\n    return (\n        <div className={`player ${libraryStatus ? 'moved' : \"\"}`}>\n            <div className=\"time-control\">\n\n                <p>{getTime(songInfo.currentTime)}</p>\n\n                <div style={{\n                    background: `linear-gradient(to right, ${currentSong.color[0]},${currentSong.color[1]})`,\n                }} className=\"track\">\n\n                    <input\n                        min={0}\n                        max={songInfo.duration}\n                        value={songInfo.currentTime}\n                        type=\"range\"\n                        onChange={dragHandler}\n                        step=\"any\"\n\n                    />\n\n                    <div className=\"animate-track\" style={trackAnim}></div>\n                </div>\n\n\n                <p>{getTime(songInfo.duration)}</p>\n\n            </div>\n\n\n            <div className=\"play-control\">\n\n                <FontAwesomeIcon onClick={() => loopHandler()} className={loop ? \"active-icon\" : \"\"} icon={faRetweet} size=\"2x\" />\n                <FontAwesomeIcon onClick={() => skipTrackHandler('skip-backward')} className=\"skip-backward\" size='2x' icon={faAngleLeft} />\n                <FontAwesomeIcon onClick={playSongHandler} className=\"play\" size='2x' icon={faControl} />\n                <FontAwesomeIcon onClick={() => skipTrackHandler('skip-forward')} className=\"skip-forward\" size='2x' icon={faAngleRight} />\n                <FontAwesomeIcon onClick={() => shuffleHandler()} className={shuffle ? \"active-icon\" : \"\"} icon={faRandom} size=\"2x\" />\n\n\n                {/* <div className=\"bars\" >\n                    <FontAwesomeIcon icon={faBars} size=\"3x\" />\n\n                </div> */}\n\n            </div>\n\n\n\n\n            {/* <div className=\"track-list\">\n                <div>\n                    {songsList.map((song) => (\n\n                        <TrackList song={song} />\n                    ))}\n\n                </div>\n\n\n            </div> */}\n\n            <audio\n                onLoadedData={autoHandler}\n                onTimeUpdate={timeUpdateHandler}\n                ref={audioRef}\n                src={currentSong.audio}\n                onLoadedMetadata={timeUpdateHandler}\n                onEnded={songEndHandler}\n            ></audio>\n        </div>\n    )\n}\n\nexport default Player;","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faVolumeUp, faVolumeDown } from '@fortawesome/free-solid-svg-icons'\n\nconst LibrarySong = ({ song, setCurrentSong, audioRef, setIsPlaying, currentSong, isPlaying }) => {\n\n    let soundIcon = null\n\n    const selectSongHandler = () => {\n\n        setCurrentSong(song)\n        audioRef.current.play()\n        setIsPlaying(true)\n\n    }\n\n    if (song.id === currentSong.id && isPlaying) {\n        soundIcon = faVolumeUp\n    }\n    else if (song.id === currentSong.id) {\n        soundIcon = faVolumeDown\n    }\n\n\n\n\n    return (\n        <div onClick={selectSongHandler} onTouchStart={selectSongHandler} className={`library-song ${song.id === currentSong.id ? \"selected\" : \"\"} `}>\n\n            <img src={song.cover} alt='Song Cover Art'></img>\n\n            <div className=\"song-description\">\n                <h3> {song.name} </h3>\n                <h4>{song.artist}</h4>\n            </div>\n\n            <FontAwesomeIcon icon={soundIcon || \"\"} />\n\n        </div>\n    )\n}\n\nexport default LibrarySong;","import LibrarySong from './LibrarySong'\n\nconst Library = ({ songs, setCurrentSong, audioRef, setIsPlaying, currentSong, libraryStatus, isPlaying }) => {\n    return (\n\n        <div className={`library ${libraryStatus ? \"active-library\" : \"\"}`}>\n\n            <h2>Music Library</h2>\n            <div className=\"library-songs\">\n\n                {songs.map((song) => (\n\n                    <LibrarySong\n                        key={song.id}\n                        songs={songs}\n                        currentSong={currentSong}\n                        song={song}\n                        audioRef={audioRef}\n                        setCurrentSong={setCurrentSong}\n                        isPlaying={isPlaying}\n                        setIsPlaying={setIsPlaying} />\n\n                ))}\n\n            </div>\n        </div>\n\n\n\n\n    );\n}\n\nexport default Library;","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMusic } from \"@fortawesome/free-solid-svg-icons\";\nimport { faWater } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Nav = ({ libraryStatus, setLibraryStatus }) => {\n    return (\n        <nav className={libraryStatus ? \"moved\" : \"\"}>\n            <h1 >Waves <FontAwesomeIcon icon={faWater} /></h1>\n\n            <button onClick={() => setLibraryStatus(!libraryStatus)} >\n                Library\n                <FontAwesomeIcon icon={faMusic} />\n\n            </button>\n        </nav >\n\n\n\n    );\n}\n\nexport default Nav;","import { v4 as uuidv4 } from \"uuid\";\nfunction chillHop() {\n    return [\n        {\n            name: \"Reflection\",\n            cover:\n                \"https://chillhop.com/wp-content/uploads/2020/07/ff35dede32321a8aa0953809812941bcf8a6bd35-1024x1024.jpg\",\n            artist: \"Swørn\",\n            audio: \"https://mp3.chillhop.com/serve.php/?mp3=9228\",\n            color: [\"#CD607D\", \"#c94043\"],\n            id: uuidv4(),\n            active: false,\n        },\n        {\n            name: \"Beaver Creek\",\n            cover:\n                \"https://chillhop.com/wp-content/uploads/2020/09/0255e8b8c74c90d4a27c594b3452b2daafae608d-1024x1024.jpg\",\n            artist: \"Aso, Middle School, Aviino\",\n            audio: \"https://mp3.chillhop.com/serve.php/?mp3=10075\",\n            color: [\"#205950\", \"#2ab3bf\"],\n            id: uuidv4(),\n            active: true,\n        },\n        {\n            name: \"Daylight\",\n            cover:\n                \"https://chillhop.com/wp-content/uploads/2020/07/ef95e219a44869318b7806e9f0f794a1f9c451e4-1024x1024.jpg\",\n            artist: \"Aiguille\",\n            audio: \"https://mp3.chillhop.com/serve.php/?mp3=9272\",\n            color: [\"#EF8EA9\", \"#ab417f\"],\n            id: uuidv4(),\n            active: false,\n        },\n        {\n            name: \"Keep Going\",\n            cover:\n                \"https://chillhop.com/wp-content/uploads/2020/07/ff35dede32321a8aa0953809812941bcf8a6bd35-1024x1024.jpg\",\n            artist: \"Swørn\",\n            audio: \"https://mp3.chillhop.com/serve.php/?mp3=9222\",\n            color: [\"#CD607D\", \"#c94043\"],\n            id: uuidv4(),\n            active: false,\n        },\n        {\n            name: \"Nightfall\",\n            cover:\n                \"https://chillhop.com/wp-content/uploads/2020/07/ef95e219a44869318b7806e9f0f794a1f9c451e4-1024x1024.jpg\",\n            artist: \"Aiguille\",\n            audio: \"https://mp3.chillhop.com/serve.php/?mp3=9148\",\n            color: [\"#EF8EA9\", \"#ab417f\"],\n            id: uuidv4(),\n            active: false,\n        },\n\n        {\n            name: \"Under the City Stars\",\n            cover:\n                \"https://chillhop.com/wp-content/uploads/2020/09/0255e8b8c74c90d4a27c594b3452b2daafae608d-1024x1024.jpg\",\n            artist: \"Aso, Middle School, Aviino\",\n            audio: \"https://mp3.chillhop.com/serve.php/?mp3=10074\",\n            color: [\"#205950\", \"#2ab3bf\"],\n            id: uuidv4(),\n            active: false,\n        },\n        //ADD MORE HERE\n\n    ];\n}\n\nexport default chillHop;","// Importing Song.js and Player.js Components (Step 3)\n\nimport Song from \"./components/Song\"\nimport Player from \"./components/Player\"\nimport Library from \"./components/Library\"\nimport Nav from \"./components/Nav\"\nimport { useState, useRef } from 'react'\n\n// Importing Util\nimport data from \"./data\"\n// Import Styles\n// import './styles/app.scss'\n\nfunction App() {\n  //State\n  const [songs, setSongs] = useState(data()) // array of song objects.\n  const [currentSong, setCurrentSong] = useState(songs[0])\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [libraryStatus, setLibraryStatus] = useState(false)\n  //Ref\n  const audioRef = useRef(null)\n\n\n  return (\n    <div className={`App ${libraryStatus ? 'library-active' : \"\"}`}>\n\n      <Nav libraryStatus={libraryStatus} setLibraryStatus={setLibraryStatus} />\n\n      <Song currentSong={currentSong} libraryStatus={libraryStatus} />\n\n      <Player\n        libraryStatus={libraryStatus}\n        audioRef={audioRef}\n        isPlaying={isPlaying}\n        setIsPlaying={setIsPlaying}\n        currentSong={currentSong}\n        setCurrentSong={setCurrentSong}\n        songs={songs} />\n\n      <Library\n        audioRef={audioRef}\n        songs={songs}\n        setCurrentSong={setCurrentSong}\n        setIsPlaying={setIsPlaying}\n        currentSong={currentSong}\n        libraryStatus={libraryStatus}\n        isPlaying={isPlaying}\n      />\n    </div>\n  );\n}\n\nexport default App;\n\n\n// Steps taken to create: (future react projects template)\n\n// =========== Beginning Steps ===========> *(rendering things to page)\n\n// 1. Created Song component that contains the Album Art, Song Name, and Artist html(jsx)\n// 2. Created Player Component that shows the what will be song progress bar, song time, and controls. (html)\n// 3. Importing Song and Player Component into App.js\n// 4. Installed Font Awesome for react from Font Awesome Website. \n// 5. Importing FontAwesomeIcons into Player Component > Rendering Play and Skip icons to Player component from Font Awesome.\n\n//  ========== Styling Start =============>\n\n// 6. Created _player.scss and _song.scss that will be imported into main app.scss file. (Called partials, like ejs templates imported)\n// 7. Imported styles folder into app.js so that it effects all pages.\n// 6. .song-container initial styling created in _song.scss\n// 7. .player initial styling created in _player.scss\n// 8. .time-control initial styling in _player.scss. (Mainly Spacing)\n// 9.  input within .time-control styled in player.scss. (Mainly spacing)\n\n// ------------------------------------- New Day ------------------------------------------------------------\n\n// =========== App.JS Component ==========>\n\n// 10. Downloaded data.js file from devEd github which returns an array of objects. Each object contains a song and it's details.\n// 11. Imported data.js into app.js\n// 12. Created a useState const for songs and setSongs with the state of data() [data() is just returning the array of objects from data.js component| data() is the component creation]\n// 13. Created a useState const for currentSong which will hold the currently being played song.\n// 14. Passed currentSong which holds the first song in the array to the Song.js component as a prop.\n\n// =========== Song.JS Component ==========>\n\n// 15. Added {currentSong} prop as a parameter to component creation in Song.js.\n// 16. Added currentSong object details to the html so that it shows on page.. Example: (<h1>{currentSong.name}</h1>)\n\n// =========== Styling ==============>\n\n// 17. Added styles to songs rendered onto the page from the Song Component.. (song names, song authors, song image |  h2, h3, img)\n\n// ------------------------------------- New Day ------------------------------------------------------------\n\n// =========== Player.JS Component ==========>\n\n// 18. Passed {currentSong} as a prop to Player.js and utilized the prop by adding it to Player.js function call parameter.\n// 19. Created an audio tag at the bottom of Player.JS component and added the currentSongs audio source to it. (currentSong.audio) <-- audio property in data.js\n// 20. Created a function called playSongHandler that will be called by the play icon when clicked to play a song.\n// 21. Added an onClick event to the fontAwesome play icon on Player.js and set it to run the newly created {playSongHandler}\n// 22. Imported useRef from react at the top of Player.JS so that we can target the audio tag the same way we would with the Dom. (document.querySelector('audio'))\n//      - Since we are unable to use the DOM to select the audio tag while using React, this useRef function makes it possible using another way.\n// 23. Created a const audioRef that equals useRef('null)\n// 24. In the audio tag at the bottom we add a \"ref=\" attribute that is set to the newly created const audioRef (ref= audioRef)\n// 25. In the playSongHandler function we console.log({audioRef}) which then shows that we have successfully targeted the play button with our onClick\n// 26. Removed the console.log and changed it to audioRef.current.play() to actually play the song instead of console.logging the audio object.\n\n// =========== App.JS Component ==========>\n\n// 27. Created a const state isPlaying / setIsPlaying and set it equal to useState(false)\n// 28. Passed isPlaying and setIsPlaying down as a prop to Player.JS\n\n// =========== Player.JS Component ==========>\n\n// 29. Added an if else statement to the playSongHandler to create play/pause functionality.\n//    - in the if(isPlaying) statement we place audioRef.current.pause() and we change setIsPlaying to (!isPlaying)  \n//    - which basically means if it is playing already when clicked change its state to its not playing or pause.\n// 30. In the Else statement we place \"audioRef.current.play()\" because if its not playing when the button is clicked we want it to play.\n//     -We also setIsPlaying to (!isPlaying) to basically toggle on/off depending on if its playing or not.\n// 31. Didn't follow tutorial: Changed play icon into pause icon if isPlaying = true.\n\n// ------------------------------------- New Day ------------------------------------------------------------\n\n// =========== Player.JS Component ==========>\n\n// 32. Created a const state songInfo/setSongInfo that holds the properties for each song.\n// 33. Created a function called timeUpdateHandler that will change the time depending on the point in the song being played.\n// 34. Used the onTimeUpdate audio tag attribute and set it to run the timeUpdateHandler function every time the song duration changes\n// 35. We listen for the event object by adding e into the timeUpdateHandler's parameter and grab its currentTime and durations value and set it as consts. \n//    - Example: (e.target.currentTime) (e.target.duration) <-------------  keys of the event object \n\n// ------------------------------------- New Day ------------------------------------------------------------\n\n// =========== Player.JS Component ==========>\n// 36. Created a function that will format the duration in seconds/minutes that takes in time as a parameter getTime(time)\n// 37. In the start time's place we call the function getTime and set songInfo.currentTime as an argument so that the currentTime (duration value) gets formatted.\n// -    <p>{getTime(songInfo.currentTime)}</p>\n// 38. In the end time's place we call the function getTime and set songInfo.duration as an argument so that it is also formatted in minutes/seconds\n// -    <p>{getTime(songInfo.duration)}</p>\n// 39. In the audio tag we add another attribute called \"onLoadedMetadata\" so that we can set it's initial end time as soon as it loads on the page.\n//     - We set the onLoadedMetadata attriubte to onLoadedMetadata={timeUpdateHandler} which adds duration and currentTime as a property to the currently playing song's object.\n// 40. We start adding functionality to  input ranger slider by adding more attributes to the input tag.\n//    a. Added min attribute and set it to 0 (min={0})\n//    b. Added max attribute and set it to (songInfo.duration)\n//    c. Added value attribute and set it to (songInfo.currentTime)\n// 41. Created a function called dragHandler which will set the functionality for actually operating the drag.\n// 42. Added an onChange attribute to the input slider and set it to the newly created dragHandler function.\n// 43. In the dragHandler function we use the setSongInfo state and grab its current state (everything already in the songInfo object)\n//    -- Then we update the currentTIme property to whatver timestamp we drag the slider too using e.target.value.\n// 44. In the dragHandler function we also grab the audio tag by targetting it's ref: audioRef and set it's currentTime to e.target.value to make it equivalent to the value of input slider.\n//    == IMPORTANT: This is what actually makes  the input slider connected to the audio tag which is what is playing the music.\n\n// ------------------------------------- New Day ------------------------------------------------------------\n\n// =========== Library.JS Component ==========>\n\n// 45. Created a component called Library that will be the list of songs to choose from.\n// 46. Created another compoenent called LibrarySong that contains alot of the same data as the Song component.\n// 47. Imported LibrarySong component into the Library component\n// 48. Called the LibrarySong component in the div named library-song div on library.JS .\n\n// =========== App.JS Component ==========>\n\n// 49. Imported Library.js into App.Js\n// 50. Called the Library component onto the page.\n// 51. Passed down songs variable that contains the list of songs to the Library component as props.\n\n// =========== Library.JS Component ==========>\n\n// 52. Added songs to the the component paramets in Library.js to access the prop.\n// 53. In the library-songs div on the LibrarySongs component we map through the array of songs objects. \n//    -  And for each song we render a new LibrarySong component and pass it the song (individual song details) as a prop.  songs.map(song=> { <LibrarySong song=song  }) \n//    -- (songs variable is just an array of objects which each songs details) \n\n// =========== LibrarySong.JS Component =======>\n\n// 54. Added the song variable to the LibrarySong component parameter so that we can use it's properties.\n// 55. Displayed song details in the library section. (song.cover, song.name, song.artist )\n\n// =========== Styling ==============>\n\n// 56. Added styling to _library.scss which controls styling for library components (h2,h3,h4,img, padding,  font sizes, etc.  )\n// 57. Imported google font Laso.\n// 58. Created a custom scrollbar from template website.\n// 59. Hid bottom scrollbar for library component.\n\n// =========== App.JS Component ==========>\n\n//60. Send setCurrentSong as a prop to the Library component.\n\n// =========== Library.JS Component ==========>\n// \n// 61. Added setCurrentSong as a parameter to Library component creation and passed down setCurrentSong again to the LibrarySong component.\n// 62. Also pass down the array of song objects and the individual song object to the LibrarySong component. [passed down songs={songs} and song={song}]\n\n// =========== LibrarySong.JS Component =======>\n// 63. Added setCurrentSong, song and songs props to LibrarySong parameter.\n// 64. Added an onClick attribute to the library-song div and set it to selectSongHandler [onClick={selectSongHandler} ]\n// 65. Created a function called selectSongHandler and setCurrentSong to whatever song was clicked on from the list of songs. [setCurrentSong(song)]\n\n// =========== Player.JS Component ==========>\n// 66. Cut the audioRef variable from Player component.\n\n// =========== App.JS Component ==========>\n// 67. Pasted the audioRef vaiable to App.js so that we can pass it back down to Player, Library and whatever component needs access to it. (STATE LIFTING)\n//    -- (We needed to access audioRef in the Library and LibrarySong components but had no way to pass it down from the Player component, \n//    ---  so instead of creating it in the playerComponent, create it in the app component and pass it down to whichever component needs it.)\n// 68. Passed audioRef down to Player and Library components and called them in the component parameters.\n\n// =========== Library.JS Component ==========>\n// 69. Passed audioRef down again to the LibrarySong component.\n\n// =========== LibrarySong.JS Component =======>\n// 70. Called the audioRef prop into the LibrarySong component's parameter.\n// 71. Used the audiRef prop to set audioRef.current.play and audioRef.current.currentTime to 0.\n//    -- Set currentTime to 0 to make sure the song restarts from the beginning if clicked a 2nd time while already playing.\n\n// =========== Player.JS Component ==========>\n// 72. Created autoHandler function \n// 73. Added onLoadedData attriubte to audio tag and set it to the autoHandler function [onLoadedData={autoHandler}]\n//    -- This makes it so that when the audiotag is newly loaded or activated it will be ready to autoPlay the song.\n// 74. In the autoHandler function we create a promise that will wait for the selected songs audio to load fully and play the audio only ...\n//    -- if a song was playing [isPlaying(true)] [So it basically waits for the song to load up and determines on whether to play it or not depending on the previous state of isPlaying]\n\n// ------------------------------------- New Day ------------------------------------------------------------\n\n// =========== Styling ==============>\n// 75. Added a .selected class to _library.scss and set it's background to dark purple..\n\n// =========== LibrarySong.JS Component =======>\n// 76. Added a ternary statement to library-song div to set it's class to selected if it is the currently being played song.\n//    -- This will change its styling depending on if it's \"selected\" or not.\n\n// =========== Nav.JS Component ============>\n// 77. We create a Nav component which holds an h1 for title of the appname and a button which will be used to toggle library visibility\n\n// =========== STYLING ====================> _library.scss\n// 78. Hid the library component from the page by adding a negative transform and setting opacity to 0, Also an ease translation animation.\n// 79. Styled the Nav componenet button and h1\n// 80. Added .active-library as a class which undoes the transform and opacity back to normal.\n\n// ============ App.JS Component ====================>\n// 81. Added a new const useState for libraryStatus and setLibraryStatus.\n// 82. Added libraryStatus and setLibraryStatus down to Nav component as props.\n\n// =========== Nav.JS Component ============>\n// 83. Added an onClick to the library button that when clicked will setLibraryStatus to true. \n\n// =========== Library.JS Component ==========>\n// 85. Added a dynamic class to library div of \"active-library\" if libraryStatus is true.\n//    -- When libraryStatus is true, active-library will activate and show the library. When it's not it will hide the library.\n\n// =========== Styling: app.scss =============>\n// 85. Created a class of .moved which moves everything to the right by 10%\n\n// =========== Nav.JS Component ============>\n// 86. Added a class of moved to nav element depending on if libraryStatus is true or not.\n\n// ============ Misc. ======================>\n// 87. Added a class of moved to multiple elemnts (player, artwork, nav) \n//    -- This is so that when the library opens up (libraryStatus = true) >> Then everything moves to the right along with it.\n\n// ============= Player.JS Component ================>\n// 88. Created a function named skipTrackHandler that takes in direction as a parameter. Handles the skip buttons functionality\n// 89. Inside skipTrackHandler we find the currentSongs index by it's id and store it as a variable named currentIndex\n// 90. Inside skipTrackHandler depending on direction we setCurrentSong to currentIndex + 1 for forward and currentIndex -1 for backward.\n// 91. Forward  and BackWard FontAwesomeIcons: Added an onClick that will run skipTrackHandler and it's direction. [ onClick={()=> skipTrackHandler(skip-forward)}]\n\n// ------------------------------------- New Day ------------------------------------------------------------\n\n// =========== Styling: _player.scss & Player.JS =============>  (input slider styling mainly)\n// 92. input range doesn't really allow for styling/customization, so we basically removed it with the webkit: none and started creating a custom style.\n// 93. Watch https://developedbyed.com/courses/1203573/lectures/26878653 for explaination on slider, It was alot and kind of annoying.\n// --  (Basically we created 2 divs, 1 that hides it self as the songPercentage increases, Then we grabbed colors from the song data and added them to the styles.)\n\n// ============= Player.JS Component ================>\n// 94. Inside the audio tag we add an onEnded attribute and set it to songEndHandler. [onEnded={songEndHandler}]\n// 95. \n//    A. We create the songEndHandler function and find the currentSongs position in the array of songs by comparing it's id.\n//    B. Then we play the next song by changing setCurrentSong to +1 of whatever currentSong was before. \n// 96. Add a random and loop icon to the player component from FontAwesome\n// 97. Created a state const for the shuffle icon.\n// 97. Added randomization functionality to the skipforward icon when shuffle is active.\n","import { v4 as uuidv4 } from \"uuid\"\n\nexport const bookReducer = (state, action) => {\n    switch (action.type) {\n        case 'ADD_BOOK':\n            return [...state, {\n                title: action.book.title,\n                author: action.book.author,\n                id: uuidv4()\n            }]\n\n        case 'REMOVE_BOOK':\n            return state.filter(book => book.id !== action.id)\n\n        default:\n            return state\n\n    }\n}","import { createContext, useReducer } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\"\nimport { bookReducer } from \"../reducers/bookReducer\";\nexport const BookContext = createContext();\n\n\nconst BookContextProvider = (props) => {\n\n    const [books, dispatch] = useReducer(bookReducer, [])\n\n    return (\n        <BookContext.Provider value={{ books, dispatch }}>\n            {props.children}\n        </BookContext.Provider>\n    )\n}\n\nexport default BookContextProvider\n","import { useContext, useState } from 'react'\nimport { BookContext } from '../contexts/BookContext'\n\nconst BookForm = () => {\n    const { dispatch } = useContext(BookContext)\n    const [title, setTitle] = useState('')\n    const [author, setAuthor] = useState('')\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        dispatch({\n            type: 'ADD_BOOK', book: {\n                title: title,\n                author: author\n\n            }\n        })\n        setTitle('')\n        setAuthor('')\n    }\n\n\n    return (\n        <form onSubmit={handleSubmit} className=\"book-form\">\n            <input value={title} type=\"text\" placeholder=\"Enter Title.\" onChange={(e) => { setTitle(e.target.value) }} />\n            <input value={author} type=\"text\" placeholder=\"Enter Author\" onChange={(e) => { setAuthor(e.target.value) }} />\n            <button type=\"submit\">Add Book</button>\n        </form>\n    )\n}\n\nexport default BookForm\n","import { useContext, useState } from 'react'\nimport { BookContext } from '../contexts/BookContext'\n\nconst BookDetails = ({ book }) => {\n    const { dispatch } = useContext(BookContext)\n\n    return (\n\n        <li onClick={() => dispatch({ type: \"REMOVE_BOOK\", id: book.id })}>\n            <div className=\"book-title\">{book.title}</div>\n            <div className=\"book-author\">{book.author}</div>\n\n        </li>\n    )\n}\n\nexport default BookDetails\n","import { useContext } from 'react'\nimport { BookContext } from '../contexts/BookContext'\nimport BookDetails from './BookDetails'\n\nconst BookList = () => {\n\n    const { books } = useContext(BookContext)\n\n\n    // (USE THIS IN THE FUTURE: RETURNING DIFFERENT JSX DEPENDING ON IF ARRAY IS EMPTY OR NOT USING TERINARY STATEMENT)\n\n    return books.length ? (\n        <ul className=\"book-list\">\n\n            {books.map(book => (\n                <BookDetails key={book.id} book={book} />\n            ))}\n\n        </ul>\n\n    ) : (\n        <div className=\"empty\"><h1>You have no books on your list.</h1> </div>\n    )\n}\n\nexport default BookList\n","import { useContext } from 'react'\nimport { BookContext } from '../contexts/BookContext'\n\nconst Navbar = () => {\n\n    // Grab the props you need from the BookContext. In this case we only grabbed the array of book objects.\n    const { books } = useContext(BookContext);\n\n    return (\n        <div className=\"navbar\">\n            <h1>My Reading List</h1>\n            <p>Currently you have {books.length} books on your list.</p>\n        </div>\n    )\n}\n\nexport default Navbar\n","import BookForm from './components/BookForm';\nimport BookList from './components/BookList';\nimport Navbar from './components/Navbar';\nimport BookContextProvider from './contexts/BookContext';\n\nfunction BookListApp() {\n  return (\n    <div className=\"App\">\n      <BookContextProvider>\n        <Navbar />\n        <BookList />\n        <BookForm />\n      </BookContextProvider>\n    </div>\n  );\n}\n\nexport default BookListApp;\n","import { BrowserRouter as Router, Switch, Route, } from \"react-router-dom\";\nimport PracticeRepoHome from './PracticeRepoHome';\nimport Waves from './apps/waves/src/App'\nimport BookListApp from \"./apps/learning-context-api/src/App\"\nimport { useState, useEffect } from \"react\";\n\n\n\nfunction App() {\n  var head = document.head;\n  var link = document.getElementById('style-changer')\n\n  if (window.location.pathname.indexOf('waves') === 15) {\n\n\n    link.href = './stylings/waves/app.css';\n\n    head.appendChild(link);\n  } else if (window.location.pathname.indexOf('booklist') === 15) {\n\n    link.href = './stylings/booklist-app/app.css';\n\n    head.appendChild(link);\n  }\n\n\n\n  return (\n    <div >\n      <Router>\n        <Switch>\n\n          <Route exact path=\"/\">\n            <PracticeRepoHome />\n          </Route>\n\n          <Route exact path=\"/waves\">\n            <Waves />\n          </Route>\n\n          <Route exact path=\"/booklist\">\n            <BookListApp />\n          </Route>\n\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}